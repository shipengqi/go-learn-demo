package main

import "fmt"

func main() {
	urls := make([]string, 3)
	urls = append(urls, "hello")
	fmt.Println(len(urls)) // 4

	urls2 := make([]string, 0)
	urls2 = append(urls2, "hello")
	fmt.Println(len(urls2)) // 1

	// s1 := []int{0, 1, 2, 3, 8: 100}   // 索引号，直接赋值，这样，其他未注明的元素则默认 0 值。
	// fmt.Println(s1, len(s1), cap(s1)) // [0 1 2 3 0 0 0 0 100] 9 9

	slice := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
	s1 := slice[2:5] // s1 从 slice 索引2（闭区间）到索引5（开区间，元素真正取到索引4），长度为3，容量默认到数组结尾，为8
	s2 := s1[2:6:7] // s2 从 s1 的索引2（闭区间）到索引6（开区间，元素真正取到索引5），容量到索引7（开区间，真正到索引6），为5。切片是 [4,5,6,7]

	s2 = append(s2, 100) // 刚好还有一个元素的容量， s2 为[4,5,6,7,100], s1 为 [2,3,4,,,,100]
	s2 = append(s2, 200) // 扩容，将原来的元素复制新的位置，扩大自己的容量。s2 会在此次扩容的时候多留一些 buffer，将新的容量将扩大为原始容量的2倍，也就是10了。
                       // s2 为  [4,5,6,7,100,200] 一个新的切片，不再与 s1 共享底层数组
	
	s1[2] = 20 // 修改 s1 索引为2位置的元素，不会再影响 s2，但是原始数组还是会影响, s1 [2,3,20,,,,100], 原始数组为 [0,1,2,3,20,5,6,7,100,9]  

	fmt.Println(s1) // [2 3 20]
	fmt.Println(s2) // [4 5 6 7 100 200]
	fmt.Println(slice) // [0 1 2 3 20 5 6 7 100 9]
}
